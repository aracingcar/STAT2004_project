library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
library(keras)
optuna <- import("optuna")
library(reticulate)
library(reticulate)
keras <- import("keras")
py_config()
use_python("/Users/roryhackett/miniconda3/bin/python", required = TRUE)
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
use_python("/Users/roryhackett/miniconda3/bin/python", required = TRUE)
py_config()
keras <- import("keras")
library(reticulate)
use_python("/Users/roryhackett/miniconda3/bin/python", required = TRUE)
py_config()
keras <- import("keras")
library(reticulate)
use_python("/Users/roryhackett/miniconda3/bin/python", required = TRUE)
py_config()
py_module_available("optuna")
keras <- import("keras")
library(reticulate)
use_python("/Users/roryhackett/miniconda3/bin/python", required = TRUE)
py_module_available("keras")
py_module_available("optuna")
keras <- import("keras")
library(reticulate)
use_python("/Users/roryhackett/miniconda3/bin/python", required = TRUE)
py_module_available("keras")
py_module_available("optuna")
keras <- import("keras")
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
keras <- import("keras")
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
keras <- import("keras")
setwd("..")
cur_dir <- getwd()
dim_reduced_data_csv <- paste(cur_dir,
"data/processed/dim_reduced_data.csv", sep = "/")
df <- read.csv(dim_reduced_data_csv)
set.seed(123)
train_indices <- sample(1:nrow(df), 0.8 * nrow(df)) # nolint: seq_linter.
train_data <- df[train_indices, ]
test_data <- df[-train_indices, ]
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = c(num_features)) %>%
layer_dense(units = 1)
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras$keras_model_sequential(input_shape = c(num_features)) %>%
keras$layer_dense(units = 1)
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
keras <- import("keras")
library(keras)
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
library(keras)
setwd("..")
cur_dir <- getwd()
dim_reduced_data_csv <- paste(cur_dir,
"data/processed/dim_reduced_data.csv", sep = "/")
df <- read.csv(dim_reduced_data_csv)
set.seed(123)
train_indices <- sample(1:nrow(df), 0.8 * nrow(df)) # nolint: seq_linter.
train_data <- df[train_indices, ]
test_data <- df[-train_indices, ]
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = c(num_features)) %>%
layer_dense(units = 1)
print(keras.__version__)
keras_version()
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
library(tensorflow)
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
library(tensorflow)
keras <-tensorflow::tf$keras
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = c(num_features)) %>%
layer_dense(units = 1)
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = c(num_features))
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = c(num_features)) %>%
layer_dense(units = 1)
reticulate::py_last_error()
num_features
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = lsit(num_features)) %>%
layer_dense(units = 1)
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = list(num_features)) %>%
layer_dense(units = 1)
keras_version()
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
library(tensorflow)
library(keras)
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = list(num_features)) %>%
layer_dense(units = 1)
library(lightgbm)
library(data.table)
library(pROC)
library(reticulate)
optuna <- import("optuna")
library(keras)
library(tensorflow)
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = list(num_features)) %>%
layer_dense(units = 1)
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(input_shape = c(num_features)) %>%
layer_dense(units = 1)
reticulate::py_last_error()
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential()
nn_model %>%
layer_dense(units = 1)
layer_dense(units = 64, activation ='sigmoid')
# Define the model
nn_model <- keras_model_sequential()
nn_model %>%
layer_dense(units = 1)
nn_model
# Define the model
nn_model <- keras_model_sequential(name="nn")
nn_model
nn_model %>% layer_dense(units = 1)
nn_model$add(layer_dense(units = 64, activation = "relu", input_shape = c(100)))
y_train <- train_data$target
x_train <- as.matrix(train_data[, -ncol(train_data)])
y_test <- test_data$target
x_test <- as.matrix(test_data[, -ncol(test_data)])
num_features <- ncol(x_train)
# Define the model
nn_model <- keras_model_sequential(name="nn")
nn_model$add(layer_dense(units = 64, activation = "relu", input_shape = c(100)))
# Compile the model
nn_model %>% compile(
optimizer = optimizer_adam(),
loss = "mean_squared_error"
)
install_keras()
